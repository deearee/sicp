(define (equal? a b)
  (cond ((and (symbol? a) (symbol? b))
	 (eq? a b))
	((or (null? a) (null? b)) (and (null? a) (null? b)))
	((and (list? a) (list? b))
	 (and (equal? (car a) (car b)) (equal? (cdr a) (cdr b))))
	(else #f)))

(define var? symbol?)
(define same-var? eq?)

(define (=number? e num) (and (number? e) (= e num)))

(define (sum? e) (and (pair? e) (eq? '+ (car e))))
(define (addend e) (caddr e))
(define (augend e) (cadr e))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
	((=number? a2 0) a1)
	((and (number? a1) (number? a2))
	 (+ a1 a2))
	(else (list '+ a1 a2))))

(define (product? e) (and (pair? e) (eq? '* (car e))))
(define (multiplier e) (caddr e))
(define (multiplicand e) (cadr e))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
	((=number? m1 1) m2)
	((=number? m2 1) m1)
	((and (number? m1) (number? m2)) (* m1 m2))
	(else (list '* m1 m2))))

(define (expo? e) (and (pair? e) (eq? '** (car e))))
(define base cadr)
(define exponent caddr)
(define (make-expo b e)
  (cond ((=number? e 0) 1)
	((=number? e 1) b)
	(else (list '** b e))))

(define (deriv e v)
  (cond ((number? e) 0)
	((var? e) (if (same-var? e v) 1 0))
	((sum? e) (make-sum (deriv (addend e) v)
			    (deriv (augend e) v)))
	((product? e)
	 (make-sum
	  (make-product (multiplier e)
			(deriv (multiplicand e) v))
	  (make-product (multiplicand e)
			(deriv (multiplier e) v))))
	((expo? e)
	 (make-product (exponent e)
		       (make-product
			(make-expo (base e) (- (exponent e) 1))
			(deriv (base e) v))))
	(else (error "unknown expression for deriv" exp))))
